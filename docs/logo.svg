<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="1024"
   height="1024"
   viewBox="0 0 1024 1024"
   version="1.1"
   id="svg1"
   xml:space="preserve"
   inkscape:version="1.4.2 (ebf0e940d0, 2025-05-08)"
   sodipodi:docname="bloxoff-logo-file.svg"
   inkscape:export-filename="bloxoff-logo-file.png"
   inkscape:export-xdpi="96"
   inkscape:export-ydpi="96"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><sodipodi:namedview
     id="namedview1"
     pagecolor="#ffffff"
     bordercolor="#000000"
     borderopacity="0.25"
     inkscape:showpageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#d1d1d1"
     inkscape:document-units="mm"
     showgrid="false"
     inkscape:zoom="0.5"
     inkscape:cx="675"
     inkscape:cy="628"
     inkscape:window-width="1876"
     inkscape:window-height="995"
     inkscape:window-x="1937"
     inkscape:window-y="58"
     inkscape:window-maximized="1"
     inkscape:current-layer="svg1"><inkscape:grid
       id="grid1"
       units="px"
       originx="0"
       originy="0"
       spacingx="4"
       spacingy="4"
       empcolor="#0099e5"
       empopacity="0.30196078"
       color="#0099e5"
       opacity="0.14901961"
       empspacing="8"
       enabled="true"
       visible="false" /><inkscape:page
       x="0"
       y="0"
       width="1024"
       height="1024"
       id="page2"
       margin="0"
       bleed="0" /></sodipodi:namedview><defs
     id="defs1"><linearGradient
       id="swatch21"
       inkscape:swatch="solid"><stop
         style="stop-color:#6a1b90;stop-opacity:1;"
         offset="0"
         id="stop21" /></linearGradient><linearGradient
       id="swatch20"
       inkscape:swatch="solid"><stop
         style="stop-color:#000000;stop-opacity:1;"
         offset="0"
         id="stop20" /></linearGradient><linearGradient
       id="swatch19"
       inkscape:swatch="solid"><stop
         style="stop-color:#6a1b90;stop-opacity:1;"
         offset="0"
         id="stop19" /></linearGradient></defs><path
     id="path4"
     style="display:none;fill:none;stroke:#ff0101"
     d="M 0.5,0.5 V 32.152344 64.5 v 32 32 32 32 32 32 32 31.65234 32.34766 32 32 32 32 32 32 32 31.65234 32.34766 32 32 32 32 32 32 32 h 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 v -32 -32 -32 -32 -32 -32 -32 -32.34766 -31.65234 -32 -32 -32 -32 -32 -32 -32 -32.34766 -31.65234 -32 -32 -32 -32 -32 -32 -32 V 32.152344 0.5 h -32 -32 -32 -32 -32 -32 -32 -32 -32 -32 -32 -32 -32 -32 -32 -32 -32 -32 -32 -32 -32 -32 -32 -32 -32 -32 z m 32,31.652344 h 32 V 64.5 h -32 z m 96,0 h 32 V 64.5 h -32 z m 96,0 h 32 V 64.5 h -32 z m 96,0 h 32 V 64.5 h -32 z m 96,0 h 32 V 64.5 h -32 z m 96,0 h 32 V 64.5 h -32 z m 96,0 h 32 V 64.5 h -32 z m 96,0 h 32 V 64.5 h -32 z m 96,0 h 32 V 64.5 h -32 z M 96.5,96.5 h 32 32 32 v 32 32 32 h -32 -32 -32 v -32 -32 z m 288,0 h 32 32 32 v 32 32 32 h -32 -32 -32 v -32 -32 z m 288,0 h 32 32 32 v 32 32 32 h -32 -32 -32 v -32 -32 z m -640,32 h 32 v 32 h -32 z m 192,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 192,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 192,0 h 32 v 32 h -32 z m -768,96 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m -512,64 h 32 32 32 32 32 32 32 32 32 v 31.65234 32.34766 32 32 32 32 32 32 32 h -32 -32 -32 -32 -32 -32 -32 -32 -32 v -32 -32 -32 -32 -32 -32 -32 -32.34766 z m -256,31.65234 h 32 V 352.5 h -32 z m 96,0 h 32 V 352.5 h -32 z m 96,0 h 32 V 352.5 h -32 z m 384,0 h 32 V 352.5 h -32 z m 96,0 h 32 V 352.5 h -32 z m 96,0 h 32 V 352.5 h -32 z M 96.5,384.5 h 32 32 32 v 32 32 32 h -32 -32 -32 v -32 -32 z m 576,0 h 32 32 32 v 32 32 32 h -32 -32 -32 v -32 -32 z m -640,32 h 32 v 32 h -32 z m 192,0 h 32 v 32 h -32 z m 384,0 h 32 v 32 h -32 z m 192,0 h 32 v 32 h -32 z m -768,96 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 384,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m -768,95.65234 h 32 V 640.5 h -32 z m 96,0 h 32 V 640.5 h -32 z m 96,0 h 32 V 640.5 h -32 z m 96,0 h 32 V 640.5 h -32 z m 96,0 h 32 V 640.5 h -32 z m 96,0 h 32 V 640.5 h -32 z m 96,0 h 32 V 640.5 h -32 z m 96,0 h 32 V 640.5 h -32 z m 96,0 h 32 V 640.5 h -32 z M 96.5,672.5 h 32 32 32 v 32 32 32 h -32 -32 -32 v -32 -32 z m 288,0 h 32 32 32 v 32 32 32 h -32 -32 -32 v -32 -32 z m 288,0 h 32 32 32 v 32 32 32 h -32 -32 -32 v -32 -32 z m -640,32 h 32 v 32 h -32 z m 192,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 192,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 192,0 h 32 v 32 h -32 z m -768,96 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z m 96,0 h 32 v 32 h -32 z"
     inkscape:label="fractal original"
     sodipodi:insensitive="true" /><path
     id="path4-0"
     style="display:inline;fill:#6a1b90;fill-opacity:1;stroke:none;stroke-width:0.901917"
     d="m 0,244.59722 v 28.54792 29.17503 28.86149 28.86147 28.86148 28.86147 28.86147 28.86148 28.86147 28.54792 29.17505 28.86147 28.86148 28.86147 28.86147 28.86147 28.86148 28.86148 28.54791 29.17505 28.86147 28.86148 28.86147 28.86147 28.86148 28.86147 28.86151 h 28.861476 28.861477 28.861477 28.86148 28.86147 28.86148 28.86147 28.86148 28.86147 28.86148 28.86149 28.86147 28.86147 28.86147 28.86148 28.86147 28.86148 28.86148 28.86147 28.86149 28.86147 28.86147 28.86148 28.86147 28.86148 28.86147 28.86148 V 994.99559 966.13412 937.27264 908.41117 879.5497 850.68822 821.82675 792.6517 764.10379 735.24231 706.38083 677.51936 648.65789 619.79642 590.93494 562.07347 532.89842 504.3505 475.48903 446.62755 417.76608 388.90461 360.04313 331.18166 302.32017 273.14514 244.59722 H 750.39837 721.5369 692.67542 663.81395 634.95247 606.091 577.22953 548.36804 519.50657 490.64509 461.78361 432.92214 404.06066 375.19919 346.33772 317.47625 288.61476 259.75328 230.89181 202.03033 173.16886 144.30738 115.44591 86.58443 57.722953 28.861476 Z m 28.861476,28.54792 h 28.861477 v 29.17503 H 28.861476 Z m 86.584434,0 h 28.86147 v 29.17503 h -28.86147 z m 86.58442,0 h 28.86148 v 29.17503 h -28.86148 z m 86.58443,0 h 28.86149 v 29.17503 h -28.86149 z m 86.58443,0 h 28.86147 v 29.17503 h -28.86147 z m 86.58442,0 h 28.86148 v 29.17503 h -28.86148 z m 86.58443,0 h 28.86149 v 29.17503 h -28.86149 z m 86.58443,0 h 28.86148 v 29.17503 h -28.86148 z m 86.58443,0 h 28.86147 v 29.17503 H 721.5369 Z M 86.58443,331.18166 h 28.86148 28.86147 28.86148 v 28.86147 28.86148 28.86147 H 144.30738 115.44591 86.58443 v -28.86147 -28.86148 z m 259.75329,0 h 28.86147 28.86147 28.86148 v 28.86147 28.86148 28.86147 h -28.86148 -28.86147 -28.86147 v -28.86147 -28.86148 z m 259.75328,0 h 28.86147 28.86148 28.86147 v 28.86147 28.86148 28.86147 H 663.81395 634.95247 606.091 V 388.90461 360.04313 Z M 28.861476,360.04313 h 28.861477 v 28.86148 H 28.861476 Z m 173.168854,0 h 28.86148 v 28.86148 h -28.86148 z m 86.58443,0 h 28.86149 v 28.86148 h -28.86149 z m 173.16885,0 h 28.86148 v 28.86148 h -28.86148 z m 86.58443,0 h 28.86149 v 28.86148 h -28.86149 z m 173.16886,0 h 28.86147 v 28.86148 H 721.5369 Z M 28.861476,446.62755 h 28.861477 v 28.86148 H 28.861476 Z m 86.584434,0 h 28.86147 v 28.86148 h -28.86147 z m 86.58442,0 h 28.86148 v 28.86148 h -28.86148 z m 86.58443,0 h 28.86149 v 28.86148 h -28.86149 z m 86.58443,0 h 28.86147 v 28.86148 h -28.86147 z m 86.58442,0 h 28.86148 v 28.86148 h -28.86148 z m 86.58443,0 h 28.86149 v 28.86148 h -28.86149 z m 86.58443,0 h 28.86148 v 28.86148 h -28.86148 z m 86.58443,0 h 28.86147 v 28.86148 H 721.5369 Z M 259.75328,504.3505 h 28.86148 28.86149 28.86147 28.86147 28.86147 28.86148 28.86147 28.86148 28.86148 v 28.54792 29.17505 28.86147 28.86148 28.86147 28.86147 28.86147 28.86148 28.86148 H 490.64509 461.78361 432.92214 404.06066 375.19919 346.33772 317.47625 288.61476 259.75328 V 735.24231 706.38083 677.51936 648.65789 619.79642 590.93494 562.07347 532.89842 Z M 28.861476,532.89842 h 28.861477 v 29.17505 H 28.861476 Z m 86.584434,0 h 28.86147 v 29.17505 h -28.86147 z m 86.58442,0 h 28.86148 v 29.17505 h -28.86148 z m 346.33771,0 h 28.86149 v 29.17505 h -28.86149 z m 86.58443,0 h 28.86148 v 29.17505 h -28.86148 z m 86.58443,0 h 28.86147 v 29.17505 H 721.5369 Z M 86.58443,590.93494 h 28.86148 28.86147 28.86148 v 28.86148 28.86147 28.86147 H 144.30738 115.44591 86.58443 v -28.86147 -28.86147 z m 519.50657,0 h 28.86147 28.86148 28.86147 v 28.86148 28.86147 28.86147 H 663.81395 634.95247 606.091 V 648.65789 619.79642 Z M 28.861476,619.79642 h 28.861477 v 28.86147 H 28.861476 Z m 173.168854,0 h 28.86148 v 28.86147 h -28.86148 z m 346.33771,0 h 28.86149 v 28.86147 h -28.86149 z m 173.16886,0 h 28.86147 v 28.86147 H 721.5369 Z M 28.861476,706.38083 h 28.861477 v 28.86148 H 28.861476 Z m 86.584434,0 h 28.86147 v 28.86148 h -28.86147 z m 86.58442,0 h 28.86148 v 28.86148 h -28.86148 z m 346.33771,0 h 28.86149 v 28.86148 h -28.86149 z m 86.58443,0 h 28.86148 v 28.86148 h -28.86148 z m 86.58443,0 h 28.86147 v 28.86148 H 721.5369 Z M 28.861476,792.6517 h 28.861477 v 29.17505 H 28.861476 Z m 86.584434,0 h 28.86147 v 29.17505 h -28.86147 z m 86.58442,0 h 28.86148 v 29.17505 h -28.86148 z m 86.58443,0 h 28.86149 v 29.17505 h -28.86149 z m 86.58443,0 h 28.86147 v 29.17505 h -28.86147 z m 86.58442,0 h 28.86148 v 29.17505 h -28.86148 z m 86.58443,0 h 28.86149 v 29.17505 h -28.86149 z m 86.58443,0 h 28.86148 v 29.17505 h -28.86148 z m 86.58443,0 h 28.86147 v 29.17505 H 721.5369 Z M 86.58443,850.68822 h 28.86148 28.86147 28.86148 v 28.86148 28.86147 28.86147 H 144.30738 115.44591 86.58443 V 908.41117 879.5497 Z m 259.75329,0 h 28.86147 28.86147 28.86148 v 28.86148 28.86147 28.86147 H 404.06066 375.19919 346.33772 V 908.41117 879.5497 Z m 259.75328,0 h 28.86147 28.86148 28.86147 v 28.86148 28.86147 28.86147 H 663.81395 634.95247 606.091 V 908.41117 879.5497 Z M 28.861476,879.5497 h 28.861477 v 28.86147 H 28.861476 Z m 173.168854,0 h 28.86148 v 28.86147 h -28.86148 z m 86.58443,0 h 28.86149 v 28.86147 h -28.86149 z m 173.16885,0 h 28.86148 v 28.86147 h -28.86148 z m 86.58443,0 h 28.86149 v 28.86147 h -28.86149 z m 173.16886,0 h 28.86147 v 28.86147 H 721.5369 Z M 28.861476,966.13412 h 28.861477 v 28.86147 H 28.861476 Z m 86.584434,0 h 28.86147 v 28.86147 h -28.86147 z m 86.58442,0 h 28.86148 v 28.86147 h -28.86148 z m 86.58443,0 h 28.86149 v 28.86147 h -28.86149 z m 86.58443,0 h 28.86147 v 28.86147 h -28.86147 z m 86.58442,0 h 28.86148 v 28.86147 h -28.86148 z m 86.58443,0 h 28.86149 v 28.86147 h -28.86149 z m 86.58443,0 h 28.86148 v 28.86147 h -28.86148 z m 86.58443,0 h 28.86147 v 28.86147 H 721.5369 Z"
     inkscape:label="front" /><path
     id="path4-0-9"
     style="display:inline;fill:#8f25c3;fill-opacity:1;stroke:none;stroke-width:0.901917"
     d="m 779.53701,244.64465 h -28.6531 -29.276 H 692.65536 663.70967 634.77083 605.84 576.91602 548.00005 519.09207 490.50411 461.29669 432.41043 403.53103 374.65962 345.79508 316.93853 288.08885 259.24716 230.72549 201.5855 172.76553 143.95242 115.1473 86.349392 57.558909 28.77574 0 l 8.9334481,-5.75005 8.9347969,-5.75005 8.935951,-5.75119 8.937437,-5.75234 8.93858,-5.75348 8.939951,-5.75348 8.941323,-5.75462 8.942466,-5.75576 8.943837,-5.75577 8.945209,-5.75805 8.946466,-5.75805 8.947725,-5.75805 8.94932,-5.76034 8.95024,-5.76034 8.95138,-5.76148 8.95367,-5.76148 8.95366,-5.76376 8.95595,-5.76377 8.9571,-5.76491 8.9571,-5.7649 8.96052,-5.7672 8.96052,-5.76719 8.96167,-5.7672 8.96395,-5.76948 8.96396,-5.76948 8.96623,-5.770621 8.96739,-5.771766 28.8634,-0.01943 28.87026,-0.02057 28.87826,-0.01943 28.88626,-0.01943 28.89312,-0.02057 28.89997,-0.01943 28.90798,-0.02057 29.22914,-0.01943 28.60853,-0.02057 28.92969,-0.01943 28.93769,-0.02057 28.94455,-0.01943 28.95255,-0.02057 28.95941,-0.01943 28.96741,-0.02057 28.97426,-0.01943 29.29657,-0.02057 28.67482,-0.01943 28.99713,-0.02057 29.00398,-0.01943 29.01198,-0.02057 29.01884,-0.01943 29.02684,-0.02057 29.03484,-0.01943 29.04056,-0.02057 29.36514,-0.02057 28.74107,-0.01943 -9.0553,5.791196 -9.0543,5.791191 -9.05309,5.79006 -9.05196,5.78891 -9.04967,5.78776 -9.04967,5.78777 -9.04739,5.78548 -9.04624,5.78548 -9.0451,5.78548 -9.04396,5.7832 -9.04167,5.7832 -9.04167,5.78205 -9.03939,5.78205 -9.03824,5.77977 -9.0371,5.77976 -9.03596,5.77863 -9.03481,5.77862 -9.03253,5.77748 -9.03253,5.77634 -9.03024,5.77519 -9.0291,5.77406 -9.02796,5.77405 -9.02681,5.77291 -9.02453,5.77176 -9.02453,5.77177 -9.02224,5.77062 z m -19.63543,-5.76948 9.01881,-5.76948 -29.28171,10e-4 -9.01538,5.76949 z m 27.06215,-17.31072 9.02339,-5.77291 -29.292,0.003 -9.01996,5.77176 z m 27.07359,-17.31987 9.02681,-5.77406 -29.30114,0.006 -9.02453,5.77405 z m 27.08615,-17.32673 9.03024,-5.77634 -29.31142,0.008 -9.02796,5.77634 z m 27.09759,-17.33359 9.03481,-5.77976 -29.32171,0.0103 -9.03139,5.77863 z m 27.10901,-17.34158 9.03939,-5.7832 -29.332,0.0126 -9.03596,5.78206 z m 27.12159,-17.34959 9.04281,-5.78548 -29.34114,0.0149 -9.04053,5.78434 z m 27.13301,-17.35758 9.04739,-5.78777 -29.35143,0.0183 -9.04396,5.78663 z m 27.14559,-17.36445 9.05081,-5.790052 -29.36171,0.01943 -9.04739,5.788912 z m -257.03675,127.16858 9.01539,-5.76948 9.01653,-5.77062 9.01767,-5.77177 -28.96513,0.005 -28.95826,0.005 -28.95027,0.005 -9.00738,5.76833 -9.00738,5.76948 -9.00624,5.7672 28.94112,-0.002 28.94798,-0.002 z m 81.18532,-51.95847 9.02796,-5.77748 9.02796,-5.77862 9.03024,-5.77862 -28.99484,0.0103 -28.98684,0.0114 -28.97998,0.0114 -9.01995,5.77634 -9.01882,5.77634 -9.01767,5.77519 28.9697,-0.009 28.97769,-0.009 z m 81.2939,-52.02818 9.03824,-5.78434 9.04053,-5.78662 9.04167,-5.78663 -29.02341,0.0183 -29.0177,0.0183 -29.00855,0.0171 -9.03253,5.78434 -9.03024,5.78434 -9.0291,5.78205 28.99941,-0.0149 29.00627,-0.016 z m -209.45568,115.52447 9.00967,-5.7672 -28.94455,10e-4 -9.00624,5.76719 z m 54.07745,-34.61688 9.01767,-5.77291 -28.96512,0.006 -9.01424,5.77177 z m 27.05644,-17.31987 9.0211,-5.7752 -28.97427,0.008 -9.01881,5.77405 z m 54.14717,-34.6626 9.0291,-5.78091 -28.9937,0.0137 -9.02567,5.77863 z m 27.09187,-17.34273 9.03367,-5.7832 -29.00398,0.0149 -9.03025,5.78205 z m 54.21917,-34.70832 9.04053,-5.787763 -29.02342,0.01943 -9.0371,5.786623 z m -303.39374,138.65268 8.99938,-5.7649 -28.92284,0.001 -8.99595,5.76491 z m 27.00272,-17.29815 9.00395,-5.76719 -28.93312,0.003 -9.00052,5.7672 z m 27.01529,-17.30616 9.00739,-5.76948 -28.94227,0.006 -9.00395,5.76948 z m 27.02673,-17.31301 9.01081,-5.77291 -28.95141,0.008 -9.00853,5.77291 z m 27.03815,-17.32101 9.01538,-5.7752 -28.96169,0.0103 -9.01196,5.7752 z m 27.05072,-17.32787 9.01882,-5.77748 -28.97084,0.0126 -9.01653,5.77634 z m 27.06216,-17.33587 9.02338,-5.78091 -28.98112,0.0149 -9.0211,5.77976 z m 27.07358,-17.34387 9.02796,-5.7832 -28.99141,0.0172 -9.02453,5.78205 z m 27.08615,-17.35188 9.03139,-5.785476 -29.00055,0.01943 -9.02796,5.785476 z m -202.20496,92.46598 9.00395,-5.77062 9.0051,-5.77062 9.00624,-5.77291 9.00739,-5.77291 9.00852,-5.77405 9.01081,-5.77405 9.01196,-5.7752 9.01196,-5.77634 9.01424,-5.77748 -28.64511,0.0126 -29.26685,0.0137 -28.94569,0.0137 -28.9377,0.0126 -28.92969,0.0137 -28.92283,0.0137 -28.91598,0.0126 -28.90797,0.0137 -28.89998,0.0137 -8.98567,5.77062 -8.98338,5.76948 -8.98224,5.76834 -8.9811,5.76834 -8.97881,5.76719 -8.97881,5.76605 -8.97652,5.76605 -8.97539,5.76377 -8.97538,5.76377 28.87141,-0.006 28.8794,-0.007 28.88626,-0.007 28.89312,-0.007 28.90112,-0.007 28.90797,-0.006 28.91598,-0.007 29.23714,-0.007 z m -100.57274,46.13413 8.99024,-5.76262 -29.21428,0.001 -8.98681,5.76262 z m 26.97415,-17.2913 8.99367,-5.76605 -29.22457,0.005 -8.99024,5.76377 z m 26.98558,-17.29929 8.99709,-5.76834 -29.23371,0.007 -8.99481,5.76719 z m 108.06003,-69.27263 9.01424,-5.77748 -29.27371,0.0149 -9.01081,5.77748 z m 27.04501,-17.33587 9.01767,-5.78091 -29.284,0.0172 -9.01424,5.77976 z m 27.05644,-17.34501 9.02224,-5.783197 -29.29428,0.01943 -9.01767,5.782047 z m -256.25384,127.02228 8.98566,-5.76376 8.98796,-5.76377 8.98795,-5.76491 -28.89769,0.005 -28.89197,0.005 -28.88283,0.003 -8.97881,5.76262 -8.97767,5.76262 -8.97653,5.76034 28.87369,-0.002 28.88169,-0.002 z m 161.95004,-103.86664 9.00853,-5.77863 9.01195,-5.77862 9.01196,-5.78091 -28.95713,0.0183 -28.95026,0.0183 -28.94226,0.0172 -9.00282,5.77748 -9.00052,5.77748 -9.00053,5.77634 28.93312,-0.016 28.93998,-0.0149 z m -208.80078,115.39075 8.97995,-5.76034 -28.87712,0.001 -8.97766,5.76034 z m 53.90143,-34.57688 8.98796,-5.76606 -28.89769,0.006 -8.98567,5.76491 z m 107.94232,-69.2452 9.00395,-5.77633 -28.93655,0.0148 -9.00052,5.7752 z m 54.04201,-34.66831 9.01196,-5.780908 -28.95598,0.01829 -9.00853,5.780908 z m -302.4874,138.49267 8.96967,-5.75919 -28.8554,0.002 -8.96738,5.75805 z m 26.91472,-17.27872 8.97424,-5.76034 -28.86569,0.003 -8.97081,5.76034 z m 26.92729,-17.28559 8.97766,-5.76376 -28.87483,0.007 -8.97538,5.76262 z m 107.82459,-69.2189 8.99481,-5.77291 -28.91483,0.0149 -8.99024,5.77291 z m 26.98672,-17.3233 8.9971,-5.77634 -28.92398,0.0172 -8.99481,5.77519 z m 26.99701,-17.3313 9.00167,-5.778622 -28.93313,0.01943 -8.99938,5.777482 z m -301.87366,138.4401 8.96053,-5.75691 -29.14685,0.002 -8.9571,5.75576 z m 26.88615,-17.27187 8.96509,-5.75919 -29.15713,0.005 -8.96167,5.75805 z m 26.89757,-17.27872 8.96852,-5.76148 -29.16627,0.006 -8.9651,5.76034 z m 26.91014,-17.28673 8.97196,-5.76377 -29.17657,0.008 -8.96966,5.76262 z m 26.92044,-17.29473 8.97652,-5.76605 -29.18685,0.0103 -8.97195,5.76605 z m 26.933,-17.30158 8.9811,-5.76948 -29.19714,0.0126 -8.97652,5.76834 z m 26.94558,-17.30958 8.98452,-5.77177 -29.20628,0.0149 -8.98109,5.77177 z m 26.95586,-17.31644 8.98909,-5.77406 -29.21656,0.0172 -8.98453,5.77291 z m 26.96843,-17.32445 8.99253,-5.777476 -29.22571,0.01943 -8.9891,5.776336 z m -255.47437,126.87485 8.9571,-5.75691 8.95709,-5.7569 8.96053,-5.75805 -28.83255,0.005 -28.82454,0.003 -28.81768,0.005 -8.9491,5.75691 -8.94909,5.75462 -8.9467,5.75462 28.80729,-0.002 28.8154,-0.002 z m 80.65843,-51.8396 8.96853,-5.76377 8.96967,-5.7649 8.97081,-5.76606 -28.86112,0.0114 -28.85426,0.0114 -28.84626,0.0103 -8.96166,5.76376 -8.95938,5.76263 -8.95939,5.76262 28.83712,-0.009 28.84397,-0.009 z m 80.76358,-51.90704 8.97996,-5.77176 8.98224,-5.77177 8.98224,-5.77405 -28.89083,0.0183 -28.88284,0.0171 -28.87597,0.0183 -8.9731,5.77062 -8.97195,5.77062 -8.96967,5.76948 28.86569,-0.016 28.87369,-0.0148 z m -208.14817,115.25817 8.95138,-5.75462 -28.81197,0.001 -8.94681,5.75348 z m 53.72543,-34.53802 8.95938,-5.75919 -28.8314,0.006 -8.95595,5.7592 z m 26.88043,-17.27986 8.96281,-5.76148 -28.84054,0.008 -8.95939,5.76148 z m 53.79515,-34.5826 8.97081,-5.76719 -28.85998,0.0126 -8.96738,5.76605 z m 26.91585,-17.30272 8.97424,-5.76948 -28.87026,0.0148 -8.97081,5.76834 z m 53.86601,-34.62831 8.98224,-5.774057 -28.88969,0.01943 -8.97881,5.772907 z m -301.58552,138.3338 8.941209,-5.75234 -28.789684,0.001 -8.937894,5.75119 z m 26.827512,-17.25815 8.945098,-5.75463 -28.799288,0.003 -8.941894,5.75348 z m 26.839508,-17.26616 8.9491,-5.7569 -28.80934,0.006 -8.945783,5.75577 z m 26.85072,-17.27415 8.95252,-5.75919 -28.81883,0.008 -8.94909,5.75919 z m 26.86328,-17.27987 8.95595,-5.76262 -28.82797,0.0103 -8.95366,5.76148 z m 26.87357,-17.28901 8.96167,-5.76491 -28.83826,0.0126 -8.95824,5.76376 z m 26.88615,-17.29587 8.96509,-5.76719 -28.8474,0.0149 -8.96166,5.76605 z m 26.89871,-17.30386 8.96853,-5.76949 -28.85769,0.0172 -8.9651,5.76834 z m 26.90901,-17.31073 8.97309,-5.77291 -28.86797,0.01943 -8.96853,5.77177 z"
     inkscape:label="top-texture" /><path
     id="path4-0-5"
     style="display:inline;fill:#401055;fill-opacity:1;stroke:none;stroke-width:0.901917"
     d="m 778.61696,1025 v -28.59024 -29.21771 -28.90341 -28.9034 -28.90455 -28.9034 -28.90341 -28.90454 -28.90341 -28.59024 -29.21771 -28.90341 -28.90454 -28.90341 -28.9034 -28.90455 -28.9034 -28.90341 -28.59024 -29.21771 -28.9034 -28.90455 -28.90341 -28.9034 -28.90455 -28.9034 -28.90455 l 9.692,-6.17293 9.6417,-6.14208 9.59028,-6.10892 9.54113,-6.07693 9.49198,-6.04607 9.4417,-6.01521 9.39369,-5.98321 9.34454,-5.95234 9.29769,-5.92149 9.24854,-5.89178 9.20168,-5.86205 9.15482,-5.8312 9.10911,-5.80148 9.06224,-5.77291 9.01539,-5.7432 8.97081,-5.71347 8.92509,-5.68605 8.88052,-5.65633 8.83594,-5.6289 8.79252,-5.60033 8.74794,-5.57175 8.70451,-5.54433 8.66108,-5.51803 8.61764,-5.48947 8.5765,-5.462031 8.5331,-5.435746 8.4919,-5.40946 v 26.985577 26.98558 26.98672 26.98558 26.98558 26.98557 26.98558 27.27931 26.69185 26.98558 26.98557 26.98673 26.98557 26.98558 26.98558 26.98558 27.27931 26.69184 26.98558 26.98558 26.98672 26.98558 26.98558 26.98558 26.98557 27.27931 26.69185 l -8.4919,7.20499 -8.5331,7.23928 -8.5765,7.27586 -8.61764,7.31128 -8.66108,7.34786 -8.70451,7.38557 -8.74794,7.42101 -8.79252,7.45986 -8.83594,7.49644 -8.88052,7.53416 -8.92509,7.57187 -8.97081,7.61073 -9.01539,7.64959 -9.06224,7.68845 -9.10911,7.72731 -9.15482,7.76617 -9.20168,7.80731 -9.24854,7.84732 -9.29769,7.88732 -9.34454,7.92846 -9.39369,7.96847 -9.4417,8.01075 -9.49198,8.05304 -9.54113,8.09531 -9.59028,8.1376 -9.6417,8.1834 z m 9.692,-36.73701 9.6417,-8.10561 v -29.06456 l -9.6417,8.02904 z m 28.77311,-24.18884 9.49198,-7.97875 v -28.83826 l -9.49198,7.90332 z m 28.32737,-23.81282 9.34454,-7.85646 v -28.61539 l -9.34454,7.78217 z m 27.89077,-23.44709 9.20168,-7.7353 v -28.39595 l -9.20168,7.6633 z m 27.46561,-23.0882 9.06224,-7.61873 v -28.17879 l -9.06224,7.54558 z m 27.04844,-22.73962 8.92509,-7.50215 v -27.96621 l -8.92509,7.43244 z m 26.64155,-22.39559 8.79252,-7.39129 v -27.75591 l -8.79252,7.32043 z m 26.24497,-22.06301 8.66108,-7.28042 v -27.55019 l -8.66108,7.213 z m 25.85522,-21.73498 8.5331,-7.17414 v -27.3456 l -8.5331,7.10556 z m -199.01506,109.63612 9.54113,-7.87131 9.49198,-7.82903 9.4417,-7.78903 v -28.45424 -28.45423 -28.45424 l -9.4417,7.5673 -9.49198,7.60616 -9.54113,7.64616 v 28.67711 28.67825 z m 84.11577,-69.38806 9.10911,-7.51358 9.06224,-7.47586 9.01539,-7.43701 V 794.80825 767.0032 739.197 l -9.01539,7.22557 -9.06224,7.26214 -9.10911,7.29985 v 28.01878 28.01878 z m 80.33956,-66.27244 8.70451,-7.17985 8.66108,-7.14442 8.61764,-7.11013 v -27.18559 -27.18673 -27.18559 l -8.61764,6.90669 -8.66108,6.94098 -8.70451,6.9764 v 27.38903 27.39018 z m -183.68731,122.69746 9.6417,-7.87818 v -28.75253 l -9.6417,7.80274 z m 57.10048,-46.6553 9.34454,-7.63588 V 818.8668 l -9.34454,7.56273 z m 27.89077,-22.7899 9.20168,-7.51816 v -28.09078 l -9.20168,7.44729 z m 54.51405,-44.54204 8.92509,-7.293 v -27.66561 l -8.92509,7.22328 z m 26.64155,-21.76813 8.79252,-7.18328 v -27.45874 l -8.79252,7.1147 z m 52.10019,-42.56934 8.5331,-6.97298 v -27.05187 l -8.5331,6.90555 z m -218.24704,91.84079 9.6417,-7.65187 v -28.7514 l -9.6417,7.5753 z m 28.77311,-22.83447 9.49198,-7.53187 v -28.52853 l -9.49198,7.45758 z m 28.32737,-22.48018 9.34454,-7.41529 v -28.30794 l -9.34454,7.34329 z m 27.89077,-22.13386 9.20168,-7.30214 v -28.09079 l -9.20168,7.23128 z m 27.46561,-21.79556 9.06224,-7.19128 v -27.87706 l -9.06224,7.12042 z m 27.04844,-21.46526 8.92509,-7.08384 v -27.66562 l -8.92509,7.01298 z m 26.64155,-21.14295 8.79252,-6.97755 v -27.4576 l -8.79252,6.90783 z m 26.24497,-20.8275 8.66108,-6.87355 v -27.25302 l -8.66108,6.80497 z m 25.85522,-20.51777 8.5331,-6.77183 v -27.05301 l -8.5331,6.70554 z m -142.50433,56.61931 9.24854,-7.19471 9.20168,-7.15813 9.15482,-7.1227 9.10911,-7.08499 9.06224,-7.04955 9.01539,-7.01413 8.97081,-6.97869 8.92509,-6.94327 8.88052,-6.90783 v -27.29645 -27.89649 -27.5959 -27.5959 -27.5959 -27.59704 -27.5959 -27.5959 -27.5959 l -8.88052,6.28265 -8.92509,6.31352 -8.97081,6.34665 -9.01539,6.37866 -9.06224,6.41066 -9.10911,6.44381 -9.15482,6.47695 -9.20168,6.51009 -9.24854,6.54324 v 28.2348 28.23479 28.23479 28.2348 28.23479 28.2348 28.23479 28.54224 z m -75.74271,30.40749 9.6417,-7.42558 v -29.06455 l -9.6417,7.349 z m 28.77311,-22.16015 9.49198,-7.31014 V 670.5027 l -9.49198,7.23471 z m 28.32737,-21.81728 9.34454,-7.19699 v -28.61539 l -9.34454,7.1227 z m 109.04637,-83.98662 8.79252,-6.77069 v -27.75705 l -8.79252,6.70211 z m 26.24497,-20.21261 8.66108,-6.67011 V 546.4143 l -8.66108,6.60267 z m 25.85522,-19.91317 8.5331,-6.57181 v -27.34674 l -8.5331,6.50552 z m -199.01506,95.61131 9.54113,-7.19814 9.49198,-7.16042 9.4417,-7.12384 v -28.45424 -28.45423 -28.45424 l -9.4417,6.90098 -9.49198,6.93869 -9.54113,6.97298 v 28.67825 28.6771 z m 164.45533,-124.07012 8.70451,-6.56724 8.66108,-6.53409 8.61764,-6.5021 v -27.18673 -27.18559 -27.18673 l -8.61764,6.29979 -8.66108,6.33066 -8.70451,6.36266 v 27.39017 27.38903 z m -183.68731,109.75157 9.6417,-7.19814 V 606.0635 l -9.6417,7.1227 z m 57.10048,-42.63107 9.34454,-6.97755 v -28.3068 l -9.34454,6.90326 z m 109.04637,-81.41505 8.79252,-6.56381 V 483.9455 l -8.79252,6.49524 z m 52.10019,-38.89827 8.5331,-6.37066 v -27.05187 l -8.5331,6.30323 z m -218.24704,76.46047 9.6417,-6.97184 v -28.75253 l -9.6417,6.8964 z m 28.77311,-20.80579 9.49198,-6.86326 v -28.52852 l -9.49198,6.78897 z m 28.32737,-20.48348 9.34454,-6.75811 v -28.30794 l -9.34454,6.68496 z m 109.04637,-78.85375 8.79252,-6.35809 v -27.45761 l -8.79252,6.28837 z m 26.24497,-18.97826 8.66108,-6.26322 v -27.25302 l -8.66108,6.19464 z m 25.85522,-18.69595 8.5331,-6.17064 v -27.05187 l -8.5331,6.10321 z m -218.24704,71.64648 9.6417,-6.74554 v -29.06456 l -9.6417,6.66896 z m 28.77311,-20.13261 9.49198,-6.64153 v -28.83826 l -9.49198,6.5661 z m 28.32737,-19.82059 9.34454,-6.53866 v -28.61539 l -9.34454,6.46552 z m 27.89077,-19.51542 9.20168,-6.43924 v -28.3948 l -9.20168,6.36494 z m 27.46561,-19.21827 9.06224,-6.3398 v -28.17993 l -9.06224,6.26894 z m 27.04844,-18.92568 8.92509,-6.24493 V 337.5358 l -8.92509,6.17407 z m 26.64155,-18.64223 8.79252,-6.15122 v -27.75705 l -8.79252,6.08264 z m 26.24497,-18.36336 8.66108,-6.05978 v -27.55019 l -8.66108,5.99235 z m 25.85522,-18.0902 8.5331,-5.97178 v -27.3456 l -8.5331,5.9032 z m -199.01506,81.58534 9.54113,-6.52495 9.49198,-6.49181 9.4417,-6.45866 V 350.30683 321.8526 293.39836 l -9.4417,6.23579 -9.49198,6.26894 -9.54113,6.30208 v 28.67711 28.67711 z m 84.11577,-57.53251 9.10911,-6.22893 9.06224,-6.19808 9.01539,-6.16722 V 294.30356 266.4985 238.6923 l -9.01539,5.95464 -9.06224,5.98549 -9.10911,6.01635 v 28.01878 28.01879 z m 80.33956,-54.94835 8.70451,-5.95349 8.66108,-5.92378 8.61764,-5.8952 v -27.18559 -27.18673 -27.18559 l -8.61764,5.69176 -8.66108,5.72033 -8.70451,5.74891 v 27.39017 27.38903 z m -183.68731,96.80794 9.6417,-6.51923 V 347.2918 l -9.6417,6.4438 z m 57.10048,-38.60797 9.34454,-6.31808 v -28.30794 l -9.34454,6.24493 z m 27.89077,-18.85824 9.20168,-6.22208 v -28.08964 l -9.20168,6.14893 z m 54.51405,-36.85816 8.92509,-6.03578 V 254.5378 l -8.92509,5.96492 z m 26.64155,-18.01362 8.79252,-5.94435 v -27.45875 l -8.79252,5.87577 z m 52.10019,-35.22606 8.5331,-5.77063 v -27.05186 l -8.5331,5.70319 z m -218.24704,61.08014 9.6417,-6.29294 v -28.75254 l -9.6417,6.21751 z m 28.77311,-18.77938 9.49198,-6.19465 v -28.52738 l -9.49198,6.11921 z m 28.32737,-18.4868 9.34454,-6.09978 v -28.3068 l -9.34454,6.02549 z m 27.89077,-18.20335 9.20168,-6.00492 v -28.09079 l -9.20168,5.93292 z m 27.46561,-17.92448 9.06224,-5.91463 v -27.87591 l -9.06224,5.84262 z m 27.04844,-17.6536 8.92509,-5.82548 v -27.66562 l -8.92509,5.75576 z m 26.64155,-17.3873 8.79252,-5.73862 v -27.45761 l -8.79252,5.6689 z m 26.24497,-17.129 8.66108,-5.65176 v -27.25417 l -8.66108,5.58547 z m 25.85522,-16.87413 8.5331,-5.56947 v -27.05187 l -8.5331,5.50318 z"
     inkscape:label="right-texture" /><path
     style="opacity:1;mix-blend-mode:normal;fill:none;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1.14292;stroke-dasharray:none"
     d="M 778.61696,244.59722 V 1025 L 1023.5805,817.17329 V 88.559251 Z"
     id="path25"
     sodipodi:nodetypes="ccccc"
     inkscape:label="right" /><path
     style="fill:none;fill-opacity:1;stroke:none;stroke-width:1.70689;stroke-dasharray:none"
     d="M 0,244.64424 H 779.53668 L 1023.574,88.570428 241.66002,89.110151 Z"
     id="path40"
     sodipodi:nodetypes="ccccc"
     inkscape:label="top" /><script
     id="mesh_polyfill"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script></svg>
